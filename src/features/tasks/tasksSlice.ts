import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../app/store';
import { changeTask, createTask, getTasks } from './tasksAPI';

export interface Task {
  id: number;
  name: string;
  done: boolean;
}

export interface TasksState {
  tasks: Task[];
  status: 'idle' | 'loading' | 'failed';
}

const initialState: TasksState = {
  tasks: [
    { id: 1, name: 'Task 1', done: false },
    { id: 2, name: 'Task 2', done: false },
    { id: 3, name: 'Task 3', done: false },
    { id: 4, name: 'Task 4', done: true },
    { id: 5, name: 'Task 5', done: true },
  ],
  status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const addTask = createAsyncThunk(
  'tasks/add',
  async (amount: number) => {
    await createTask({
      id: 1, name: 'Task 1', done: false
    });
    return;
  }
);

export const listTasks = createAsyncThunk(
  'tasks/list',
  async () => {
    const response = await getTasks();
    return response;
  }
);

export const toggleTask = createAsyncThunk(
  'tasks/toggle',
  async (amount: number) => {
    await changeTask(0, false);
    return;
  }
);

export const tasksSlice = createSlice({
  name: 'tasks',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(addTask.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(addTask.fulfilled, (state, action) => {
        state.status = 'idle';
        state.tasks = [];
      })
      .addCase(addTask.rejected, (state) => {
        state.status = 'failed';
      });
    builder
      .addCase(listTasks.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(listTasks.fulfilled, (state, action) => {
        state.status = 'idle';
        state.tasks = action.payload;
      })
      .addCase(listTasks.rejected, (state) => {
        state.status = 'failed';
      });
    builder
      .addCase(toggleTask.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(toggleTask.fulfilled, (state, action) => {
        state.status = 'idle';
        state.tasks = [];
      })
      .addCase(toggleTask.rejected, (state) => {
        state.status = 'failed';
      });
  },
});

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.tasks.value)`
export const selectCount = (state: RootState) => state.tasks.tasks;

export default tasksSlice.reducer;
